================================================================================
                     MAKEFILE BUILD FLOW VISUALIZATION
================================================================================

STEP 1: You Type "make"
========================
    Terminal → make
                ↓
        (reads Makefile)


STEP 2: Auto-Detection Phase
=============================
    ┌─────────────────────────────────────┐
    │   ARCH := $(shell uname -m)         │
    │   Runs: uname -m                    │
    │   Result: x86_64                    │
    └─────────────────────────────────────┘
                ↓
    ┌─────────────────────────────────────┐
    │   SM_DETECT := $(shell ...)         │
    │   Runs: nvidia-smi --query-gpu...   │
    │   Result: 8.9 → 89                  │
    └─────────────────────────────────────┘
                ↓
    ┌─────────────────────────────────────┐
    │   Variables Set:                    │
    │   ARCH = x86_64                     │
    │   SM = 89                           │
    │   NVCC = nvcc                       │
    └─────────────────────────────────────┘


STEP 3: Dependency Resolution
==============================
    Target: all
      ↓
    Depends on: small_matmul_test (executable)
      ↓
    Depends on: small_matmul.o, small_matmul_cpp.o (object files)
      ↓
    Depends on: small_matmul.cu, small_matmul.cpp, small_matmul.cuh (source)


STEP 4: Build Decision Tree
============================

    ┌──────────────────────────────────────────────────────┐
    │ Does small_matmul.o exist?                           │
    │ Is it older than small_matmul.cu or small_matmul.cuh?│
    └───────────────────┬──────────────────────────────────┘
                        │
            ┌───────────┴───────────┐
            │                       │
          YES                      NO
            │                       │
            ↓                       ↓
    ┌───────────────┐       ┌─────────────┐
    │ Rebuild it    │       │ Keep it     │
    │ Run: nvcc -c  │       │ Skip        │
    └───────────────┘       └─────────────┘
                        │
                        ↓
    Same check for small_matmul_cpp.o
                        │
                        ↓
    ┌──────────────────────────────────────┐
    │ Are all .o files ready?              │
    │ YES → Link them into executable      │
    │ Run: nvcc -o small_matmul_test ...   │
    └──────────────────────────────────────┘
                        │
                        ↓
                  ┌─────────┐
                  │  DONE!  │
                  └─────────┘


STEP 5: Actual Commands Executed
=================================

If building from scratch:

1. nvcc -O3 -use_fast_math -Xcompiler -Wall -Xcompiler -Wextra \
        -Xcompiler -fopenmp -gencode arch=compute_89,code=sm_89 \
        -c small_matmul.cu -o small_matmul.o

2. nvcc -O3 -use_fast_math -Xcompiler -Wall -Xcompiler -Wextra \
        -Xcompiler -fopenmp -gencode arch=compute_89,code=sm_89 \
        -c small_matmul.cpp -o small_matmul_cpp.o

3. nvcc -O3 -use_fast_math -Xcompiler -Wall -Xcompiler -Wextra \
        -Xcompiler -fopenmp -gencode arch=compute_89,code=sm_89 \
        -o small_matmul_test small_matmul.o small_matmul_cpp.o -lgomp


FILE DEPENDENCY GRAPH
=====================

    small_matmul.cuh ────┐
                         │
                         ├──→ small_matmul.o ──┐
    small_matmul.cu  ────┘                     │
                                                ├──→ small_matmul_test
    small_matmul.cuh ────┐                     │
                         │                     │
                         ├──→ small_matmul_cpp.o ┘
    small_matmul.cpp ────┘


WHAT HAPPENS ON INCREMENTAL BUILDS?
====================================

Scenario: You edit small_matmul.cu

    small_matmul.cu (CHANGED - timestamp: 10:30)
    small_matmul.o  (timestamp: 10:00)
    small_matmul_test (timestamp: 10:00)

    Make detects:
    ✓ small_matmul.cu is newer than small_matmul.o → REBUILD
    ✓ small_matmul_cpp.o is still valid → SKIP
    ✓ small_matmul.o is newer than executable → RELINK

    Commands run:
    1. nvcc -c small_matmul.cu -o small_matmul.o
    2. nvcc -o small_matmul_test small_matmul.o small_matmul_cpp.o -lgomp

    (Skipped compiling small_matmul_cpp.o - saves time!)


VARIABLE EXPANSION EXAMPLE
==========================

Before expansion:
    $(NVCC) $(NVCC_FLAGS) -c $< -o $@

After expansion:
    nvcc -O3 -use_fast_math -Xcompiler -Wall -Xcompiler -Wextra \
         -Xcompiler -fopenmp -gencode arch=compute_89,code=sm_89 \
         -c small_matmul.cu -o small_matmul.o

Where:
    $(NVCC)       → nvcc
    $(NVCC_FLAGS) → -O3 -use_fast_math ... -gencode ...
    $<            → small_matmul.cu (first dependency)
    $@            → small_matmul.o (target)


COMMON MAKE COMMANDS & WHAT THEY DO
====================================

make
    ├─ Reads Makefile
    ├─ Auto-detects ARCH and SM
    ├─ Executes "all" target
    └─ Builds small_matmul_test

make clean
    └─ Deletes: small_matmul.o, small_matmul_cpp.o, small_matmul_test

make rebuild
    ├─ Runs "clean" first
    └─ Then runs "all"

make run
    ├─ Ensures small_matmul_test is built
    └─ Runs: ./small_matmul_test

make run-large
    ├─ Ensures small_matmul_test is built
    └─ Runs: ./small_matmul_test 100000

make info
    ├─ Prints ARCH and SM
    ├─ Runs nvidia-smi
    ├─ Runs nvcc --version
    └─ Shows system info

make SM=86
    ├─ Overrides auto-detected SM
    └─ Builds for RTX 30xx series

make -j4
    └─ Uses 4 parallel jobs (faster compilation)


DEBUGGING MAKE
===============

See what make would do (without doing it):
    make -n

See what make is thinking:
    make --debug=basic

See all variables:
    make -p

See which files are newer:
    make -d


TROUBLESHOOTING
===============

Problem: "make: Nothing to be done for 'all'"
Solution: Everything is up to date. Either:
          - Files haven't changed
          - Run "make clean" then "make"

Problem: Recipe commences before first target
Solution: Check for spaces instead of tabs before commands

Problem: No rule to make target
Solution: Check file names match between rules and actual files

Problem: nvcc: command not found
Solution: CUDA not in PATH, or need to specify full path

================================================================================
